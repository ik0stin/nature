!function(g,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var I=n();for(var C in I)("object"==typeof exports?exports:g)[C]=I[C]}}(self,(()=>(()=>{"use strict";var __webpack_modules__={986:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n;// CONCATENATED MODULE: ./src/js/utils.js\nconst imagesLoaded = __webpack_require__(564);\n\n// Preload images\nconst preloadImages = (selector = 'img') => {\n  return new Promise(resolve => {\n    imagesLoaded(document.querySelectorAll(selector), {\n      background: true\n    }, resolve);\n  });\n};\nconst calcWinsize = () => {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n};\nconst getScrollValues = () => {\n  const supportPageOffset = window.pageXOffset !== undefined;\n  const isCSS1Compat = (document.compatMode || \"\") === \"CSS1Compat\";\n  const x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? document.documentElement.scrollLeft : document.body.scrollLeft;\n  const y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? document.documentElement.scrollTop : document.body.scrollTop;\n  return {\n    x,\n    y\n  };\n};\n\n// wrap each element of an array\n// elems - the array of elements to wrap\n// wrapType - type of wrapper ('div', 'span' etc)\n// wrapClass - wrapper class(s) \nconst utils_wrapLines = (elems, wrapType, wrapClass) => {\n  elems.forEach(char => {\n    // add a wrap for every char (overflow hidden)\n    const wrapEl = document.createElement(wrapType);\n    wrapEl.classList = wrapClass;\n    char.parentNode.appendChild(wrapEl);\n    wrapEl.appendChild(char);\n  });\n};\nconst adjustedBoundingRect = el => {\n  var rect = el.getBoundingClientRect();\n  var style = getComputedStyle(el);\n  var tx = style.transform;\n  if (tx) {\n    var sx, sy, dx, dy;\n    if (tx.startsWith('matrix3d(')) {\n      var ta = tx.slice(9, -1).split(/, /);\n      sx = +ta[0];\n      sy = +ta[5];\n      dx = +ta[12];\n      dy = +ta[13];\n    } else if (tx.startsWith('matrix(')) {\n      var ta = tx.slice(7, -1).split(/, /);\n      sx = +ta[0];\n      sy = +ta[3];\n      dx = +ta[4];\n      dy = +ta[5];\n    } else {\n      return rect;\n    }\n    var to = style.transformOrigin;\n    var x = rect.x - dx - (1 - sx) * parseFloat(to);\n    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(' ') + 1));\n    var w = sx ? rect.width / sx : el.offsetWidth;\n    var h = sy ? rect.height / sy : el.offsetHeight;\n    return {\n      x: x,\n      y: y,\n      width: w,\n      height: h,\n      top: y,\n      right: x + w,\n      bottom: y + h,\n      left: x\n    };\n  } else {\n    return rect;\n  }\n};\n\n// EXTERNAL MODULE: ./node_modules/gsap/index.js + 2 modules\nvar node_modules_gsap = __webpack_require__(358);\n;// CONCATENATED MODULE: ./src/js/textReveal.js\n\nclass TextReveal {\n  constructor(el) {\n    this.DOM = {\n      outer: el,\n      inner: Array.isArray(el) ? el.map(outer => outer.querySelector('.oh__inner')) : el.querySelector('.oh__inner')\n    };\n  }\n  in() {\n    if (this.outTimeline && this.outTimeline.isActive()) {\n      this.outTimeline.kill();\n    }\n    this.inTimeline = node_modules_gsap/* gsap */.p8.timeline({\n      defaults: {\n        duration: 1.2,\n        ease: 'expo'\n      }\n    }).set(this.DOM.inner, {\n      y: '120%',\n      rotate: 15\n    }).to(this.DOM.inner, {\n      y: '0%',\n      rotate: 0,\n      stagger: 0.03\n    });\n    return this.inTimeline;\n  }\n  out() {\n    if (this.inTimeline && this.inTimeline.isActive()) {\n      this.inTimeline.kill();\n    }\n    this.outTimeline = node_modules_gsap/* gsap */.p8.timeline({\n      defaults: {\n        duration: 0.5,\n        ease: 'expo.in'\n      }\n    }).to(this.DOM.inner, {\n      y: '-120%',\n      rotate: -5,\n      stagger: 0.03\n    });\n    return this.outTimeline;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/split-type/dist/index.js\nvar dist = __webpack_require__(829);\n;// CONCATENATED MODULE: ./src/js/textLinesReveal.js\n\n\n\nclass TextLinesReveal {\n  constructor(animationElems) {\n    this.DOM = {\n      animationElems: Array.isArray(animationElems) ? animationElems : [animationElems]\n    };\n    this.SplitTypeInstances = [];\n    this.lines = [];\n    for (const el of this.DOM.animationElems) {\n      const SplitTypeInstance = new SplitType(el, {\n        types: 'lines'\n      });\n      wrapLines(SplitTypeInstance.lines, 'div', 'oh');\n      this.lines.push(SplitTypeInstance.lines);\n      this.SplitTypeInstances.push(SplitTypeInstance);\n    }\n    this.initEvents();\n  }\n  in() {\n    this.isVisible = true;\n    gsap.killTweensOf(this.lines);\n    return gsap.timeline({\n      defaults: {\n        duration: 1.2,\n        ease: 'expo'\n      }\n    }).set(this.lines, {\n      y: '150%',\n      rotate: 15\n    }).to(this.lines, {\n      y: '0%',\n      rotate: 0,\n      stagger: 0.04\n    });\n  }\n  out() {\n    this.isVisible = false;\n    gsap.killTweensOf(this.lines);\n    return gsap.timeline({\n      defaults: {\n        duration: 0.5,\n        ease: 'expo.in'\n      }\n    }).to(this.lines, {\n      y: '-150%',\n      rotate: -5,\n      stagger: 0.02\n    });\n  }\n  initEvents() {\n    window.addEventListener('resize', () => {\n      this.lines = [];\n      for (const instance of this.SplitTypeInstances) {\n        instance.split();\n        wrapLines(instance.lines, 'div', 'oh');\n        this.lines.push(instance.lines);\n      }\n      if (!this.isVisible) {\n        gsap.set(this.lines, {\n          y: '-150%'\n        });\n      }\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/js/contentItem.js\n\n\n\n/**\n * Class representing a content item (.content__item).\n */\nclass ContentItem {\n  DOM = {\n    // Main element (.content__item)\n    el: null\n  };\n\n  // TextReveal obj to animate the texts (slide in/out)\n  textReveal = null;\n\n  // TextLinesReveal obj to animate the ,ulti line texts (slide in/out)\n  textLinesReveal = null;\n\n  /**\n   * Constructor.\n   * DOM_el - the .content__item element.\n   */\n\n  constructor(DOM_el) {\n    this.DOM.el = DOM_el;\n\n    // Text animations\n    this.textReveal = new TextReveal([...this.DOM.el.querySelectorAll('.oh')]);\n    // Text lines animations\n    // this.textLinesReveal = new TextLinesReveal(this.DOM.el.querySelector('.content__item-text'))\n  }\n}\n;// CONCATENATED MODULE: ./src/js/imageCell.js\n\nclass ImageCell {\n  DOM = {\n    // Main element (.grid__cell-img)\n    el: null,\n    // Inner element\n    inner: null,\n    // The ImageCell's content item id.\n    contentId: null,\n    // The ContentItem instance\n    contentItem: null\n  };\n\n  /**\n   * Constructor.\n   *  DOM_el - the .grid__cell-img element.\n   */\n  constructor(DOM_el) {\n    this.DOM.el = DOM_el;\n    this.DOM.inner = this.DOM.el.querySelector('.grid__cell-img-inner');\n\n    // Сохранение исходных значений\n    this.original = {\n      width: this.DOM.el.clientWidth,\n      height: this.DOM.el.clientHeight\n    };\n\n    // The ImageCell's content item id.\n    this.contentId = this.DOM.inner.dataset.item;\n\n    // The ContentItem instance\n    this.contentItem = new ContentItem(document.querySelector(`#${this.contentId}`));\n\n    // window.addEventListener('resize', () => {\n    //   if (!this.contentItem.DOM.el.classList.contains('content__item--current'))\n    //   this.updateOriginalValues.bind(this)\n    // });\n  }\n\n  // updateOriginalValues() {\n  //   this.original.width = this.DOM.el.clientWidth;\n  //   this.original.height = this.DOM.el.clientHeight;\n  //   this.original.x = this.DOM.el.getBoundingClientRect().left;\n  //   this.original.y = this.DOM.el.getBoundingClientRect().top;\n  // }\n}\n// EXTERNAL MODULE: ./node_modules/gsap/CustomEase.js + 1 modules\nvar CustomEase = __webpack_require__(67);\n;// CONCATENATED MODULE: ./src/js/grid.js\n\n\n\n\n\nnode_modules_gsap/* gsap */.p8.registerPlugin(CustomEase/* CustomEase */.t);\nCustomEase/* CustomEase */.t.create('hop', \"M0,0 C0.083,0.294 0.117,0.767 0.413,0.908 0.606,1 0.752,1 1,1\");\nconst bodyEl = document.body;\nlet winsize = calcWinsize();\nwindow.addEventListener('resize', () => winsize = calcWinsize());\nclass Grid {\n  DOM = {\n    el: null,\n    imageCells: null,\n    content: null,\n    miniGrid: {\n      el: null,\n      cells: null\n    },\n    navigation: {\n      left: null,\n      right: null\n    },\n    pagination: {\n      numbers: null\n    }\n  };\n  imageCellArr = [];\n  currentCell = -1;\n  isGridView = true;\n  isAnimation = false;\n  textReveal = null;\n\n  /**\n   * Constructor.\n   * DOM_el - the .grid--large element\n   */\n  constructor(DOM_el) {\n    this.DOM.el = DOM_el;\n    this.DOM.imageCells = [...this.DOM.el.querySelectorAll('.grid__cell-img')];\n    this.DOM.imageCells.forEach(el => this.imageCellArr.push(new ImageCell(el)));\n    this.DOM.content = document.querySelector('.content');\n    // this.DOM.backCtrl = this.DOM.content.querySelector('.back'); должно быть по скроллу\n    this.DOM.miniGrid.el = this.DOM.content.querySelector('.grid--mini');\n    this.DOM.miniGrid.cells = [...this.DOM.miniGrid.el.querySelectorAll('.grid__cell')];\n    this.DOM.navigation = this.DOM.content.querySelector('.content__navigation');\n    this.DOM.navigation.left = this.DOM.navigation.querySelector('.content__navigation-left');\n    this.DOM.navigation.right = this.DOM.navigation.querySelector('.content__navigation-right');\n    this.currentRotation = 0;\n    this.DOM.pagination = this.DOM.content.querySelector('.content__pagination');\n    this.DOM.pagination.numbers = this.DOM.content.querySelector('.content__pagination-conatiner');\n\n    // Text animation проверить\n    this.textReveal = new TextReveal([...this.DOM.el.querySelectorAll('.oh')]);\n\n    // Events\n    this.initEvents();\n  }\n  initEvents() {\n    for (const [position, imageCell] of this.imageCellArr.entries()) {\n      // Open the imageCell and reveal its content\n      imageCell.DOM.el.addEventListener('click', () => {\n        if (!this.isGridView || this.isAnimating) {\n          return false;\n        }\n        this.isAnimating = true;\n        this.isGridView = false;\n\n        // Update the mini grid current cell\n        if (this.currentCell !== -1) {\n          this.DOM.miniGrid.cells[this.currentCell].classList.remove('grid__cell--current');\n        }\n\n        // Update currentCell\n        this.currentCell = position;\n        this.DOM.miniGrid.cells[this.currentCell].classList.add('grid__cell--current');\n        this.showContent(imageCell);\n      });\n\n      // Hover on the image cell will scale down the outer element and scale up the inner element.\n      imageCell.DOM.el.addEventListener('mouseenter', () => {\n        if (!this.isGridView) {\n          return false;\n        }\n        node_modules_gsap/* gsap */.p8.killTweensOf([imageCell.DOM.el, imageCell.DOM.inner]);\n        node_modules_gsap/* gsap */.p8.timeline({\n          defaults: {\n            duration: 2.4,\n            ease: 'expo'\n          }\n        }).to(imageCell.DOM.inner, {\n          scale: 1.1\n        }, 0);\n      });\n\n      // Hovering out will reverse the scale values.\n      imageCell.DOM.el.addEventListener('mouseleave', () => {\n        if (!this.isGridView) {\n          return false;\n        }\n        node_modules_gsap/* gsap */.p8.killTweensOf([imageCell.DOM.el, imageCell.DOM.inner]);\n        node_modules_gsap/* gsap */.p8.timeline({\n          defaults: {\n            duration: 2.4,\n            ease: 'expo'\n          }\n        }).to(imageCell.DOM.inner, {\n          scale: 1\n        }, 0);\n      });\n    }\n\n    // Close the imageCell and reveal the grid\n    window.addEventListener('wheel', () => {\n      if (!this.isGridView || this.isAnimating) {\n        this.isAnimating = true;\n        this.isGridView = true;\n        this.closeContent();\n      }\n    });\n    // this.DOM.content.addEventListener('click', () => {\n    //   if ( this.isAnimating ) {\n    //     return false;\n    //   }\n    //   this.isAnimating = true;\n    //   this.isGridView = true;\n\n    //   this.closeContent();\n    // });\n\n    if (this.imageCellArr.length > 0) {\n      this.currentCell = 0;\n      this.isGridView = false;\n      this.showContent(this.imageCellArr[0]);\n    }\n    this.wheelSlides();\n    this.DOM.miniGrid.cells.forEach((cell, position) => {\n      cell.addEventListener('click', () => {\n        if (this.isAnimating || this.currentCell === position) {\n          return false;\n        }\n        this.isAnimating = true;\n        this.changeContent(position);\n      });\n    });\n\n    // Обработчик для стрелки \"влево\"\n\n    this.DOM.navigation.left.addEventListener('click', () => {\n      if (this.isGridView || this.isAnimating) return false;\n      node_modules_gsap/* gsap */.p8.to([this.DOM.navigation.left, this.DOM.navigation.right], {\n        rotate: this.currentRotation,\n        duration: 1.5,\n        ease: 'hop'\n      });\n      let newPosition = this.currentCell - 1;\n      if (newPosition < 0) {\n        newPosition = this.imageCellArr.length - 1; // Если это первая ячейка, переключаемся на последнюю\n      }\n      this.isAnimating = true;\n      this.changeContent(newPosition);\n    });\n    this.DOM.navigation.right.addEventListener('click', () => {\n      if (this.isGridView || this.isAnimating) return false;\n      node_modules_gsap/* gsap */.p8.to([this.DOM.navigation.left, this.DOM.navigation.right], {\n        rotate: this.currentRotation,\n        duration: 1.5,\n        ease: 'hop'\n      });\n      let newPosition = this.currentCell + 1;\n      if (newPosition >= this.imageCellArr.length) {\n        newPosition = 0; // Если это последняя ячейка, переключаемся на первую\n      }\n      this.isAnimating = true;\n      this.changeContent(newPosition);\n    });\n\n    // Recalculate current image transform\n    window.addEventListener('resize', () => {\n      // const currentImageCell = this.imageCellArr[this.currentCell];\n      // this.imagesRestTransform = this.calcOtherImage();\n      // this.otherImageCells = this.imageCellArr.filter(cell => cell !== currentImageCell);\n\n      // // console.log(this.otherImageCells)\n\n      // this.otherImageCells.forEach(cell => {\n      //   gsap.set(cell.DOM.el, {\n      //     width: this.imagesRestTransform.width,\n      //     height: this.imagesRestTransform.height\n      //   });\n      //   console.log(cell.DOM.el, this.imagesRestTransform.width)\n      // });\n\n      if (this.isGridView) {\n        // this.imagesTransform = this.calcOtherImage();\n\n        // console.log(this.otherImageCells)\n\n        // this.imageCellArr.forEach(cell => {\n        //   gsap.set(cell.DOM.el, {\n        //     width: this.imagesTransform.width,\n        //     height: this.imagesTransform.height\n        //   });\n        //   console.log(cell.DOM.el)\n        // });\n\n        return false;\n      }\n\n      // Calculate the transform to apply to the image cell\n\n      const currentImageCell = this.imageCellArr[this.currentCell];\n      const imageTransform = this.calcTransformImage();\n      node_modules_gsap/* gsap */.p8.set(currentImageCell.DOM.el, {\n        // scale: imageTransform.scale,\n        x: imageTransform.x - 20,\n        y: imageTransform.y - 10,\n        width: window.innerWidth + 40,\n        height: window.innerHeight + 20\n      });\n    });\n  }\n\n  /**\n   * Scale up the image and reveal its content.\n   * @param {ImageCell} imageCell - the imageCell element.\n   */\n\n  showContent(imageCell) {\n    const imagesRestTransform = this.calcOtherImage();\n    const imageTransform = this.calcTransformImage();\n    this.otherImageCells = this.DOM.imageCells.filter(el => el != imageCell.DOM.el);\n    node_modules_gsap/* gsap */.p8.killTweensOf([imageCell.DOM.el, imageCell.DOM.inner, this.otherImageCells]);\n    node_modules_gsap/* gsap */.p8.timeline({\n      defaults: {\n        duration: 1.2,\n        ease: 'hop'\n      },\n      onStart: () => bodyEl.classList.add('oh'),\n      onComplete: () => {\n        this.isAnimating = false;\n      }\n    }).addLabel('start', 0).add(() => {\n      this.textReveal.out();\n    }, 'start').set(this.DOM.el, {\n      pointerEvents: 'none'\n    }, 'start').set(imageCell.DOM.el, {\n      zIndex: 100\n    }, 'start').set([imageCell.DOM.el, imageCell.DOM.inner, this.otherImageCells], {\n      willChange: 'transform, opacity'\n    }, 'start').to(imageCell.DOM.el, {\n      // scale: imageTransform.scale,\n      x: imageTransform.x - 20,\n      y: imageTransform.y - 10,\n      width: window.innerWidth + 40,\n      height: window.innerHeight + 20,\n      onComplete: () => node_modules_gsap/* gsap */.p8.set(imageCell.DOM.el, {\n        willCange: ''\n      })\n    }, 'start').to(imageCell.DOM.inner, {\n      scale: 1,\n      onComplete: () => node_modules_gsap/* gsap */.p8.set(imageCell.DOM.inner, {\n        willChange: ''\n      })\n    }, 'start').to(this.otherImageCells, {\n      opacity: 0,\n      scale: 0.8,\n      onComplete: () => node_modules_gsap/* gsap */.p8.set(this.otherImageCells, {\n        willChange: ''\n      }),\n      stagger: {\n        grid: 'auto',\n        amount: 0.17,\n        from: this.currentCell\n      }\n    }, 'start').set(this.DOM.pagination.numbers, {\n      y: `${-20 * this.currentCell}%`\n    }, 'start').addLabel('showContent', 'start+=0.45').set(this.DOM.miniGrid.el, {\n      opacity: 1\n    }, 'showContent').set(this.DOM.miniGrid.cells, {\n      opacity: 0,\n      y: '100%'\n    }, 'showContent').to(this.DOM.miniGrid.cells, {\n      duration: 1,\n      ease: 'expo',\n      opacity: 1,\n      y: 0,\n      startAt: {\n        scale: 0.8\n      },\n      scale: 1,\n      stagger: {\n        grid: 'auto',\n        amount: 0.3,\n        from: this.currentCell\n      }\n    }, 'showContent+=0.2').to([this.DOM.navigation.left, this.DOM.navigation.right], {\n      duration: 1,\n      ease: 'expo',\n      opacity: 1,\n      scale: 1\n    }, 'showContent+=0.2').to(this.DOM.pagination, {\n      duration: 0.5,\n      y: '0%',\n      opacity: 1,\n      ease: 'expo.in'\n    }, 'showContent+=0.2').add(() => {\n      imageCell.contentItem.textReveal.in();\n      this.DOM.content.classList.add('content--open');\n    }, 'showContent').add(() => imageCell.contentItem.DOM.el.classList.add('content__item--current'), 'showContent+=0.02');\n  }\n\n  /**\n   * Scale down the image and reveal the grid again.\n   */\n  closeContent() {\n    const imageCell = this.imageCellArr[this.currentCell];\n    this.otherImageCells = this.DOM.imageCells.filter(el => el != imageCell.DOM.el);\n\n    // const imagesRestTransform = this.calcOtherImage();\n\n    node_modules_gsap/* gsap */.p8.timeline({\n      defaults: {\n        duration: 1,\n        ease: 'hop'\n      },\n      onStart: () => bodyEl.classList.remove('oh'),\n      onComplete: () => {\n        this.isAnimating = false;\n      }\n    }).addLabel('start', 0).to([this.DOM.navigation.left, this.DOM.navigation.right], {\n      duration: 0.5,\n      ease: 'expo.in',\n      scale: 0\n    }, 'start').to(this.DOM.pagination, {\n      duration: 0.5,\n      y: '10%',\n      opacity: 0,\n      ease: 'expo.in'\n    }, 'start').to(this.DOM.miniGrid.cells, {\n      duration: 0.5,\n      ease: 'expo.in',\n      opacity: 0,\n      y: '100%',\n      stagger: {\n        grid: 'auto',\n        amount: 0.1,\n        from: -this.currentCell\n      },\n      onComplete: () => {\n        node_modules_gsap/* gsap */.p8.set(this.DOM.miniGrid.el, {\n          opacity: 0\n        });\n      }\n    }, 'start').add(() => {\n      imageCell.contentItem.textReveal.out();\n      this.DOM.content.classList.remove('content--open');\n    }, 'start').add(() => imageCell.contentItem.DOM.el.classList.remove('content__item--current')).addLabel('showgrid', 0).set([imageCell.DOM.el, this.otherImageCells], {\n      willChange: 'transform, opacity'\n    }, 'showGrid').to(imageCell.DOM.el, {\n      x: 0,\n      y: 0,\n      width: this.otherImageCells[0].offsetWidth,\n      height: this.otherImageCells[0].offsetHeight,\n      zIndex: 100,\n      onComplete: () => {\n        node_modules_gsap/* gsap */.p8.set(imageCell.DOM.el, {\n          width: 'calc(100% - var(--grid-padding) * 2)',\n          height: 'calc(100% - var(--grid-padding) * 2)',\n          willChange: '',\n          zIndex: 1\n        });\n      }\n    }, 'showGrid').to(this.otherImageCells, {\n      opacity: 1,\n      scale: 1,\n      onComplete: () => {\n        node_modules_gsap/* gsap */.p8.set(this.otherImageCells, {\n          willChange: ''\n        });\n        node_modules_gsap/* gsap */.p8.set(this.DOM.el, {\n          pointerEvents: 'auto'\n        });\n      },\n      stagger: {\n        grid: 'auto',\n        amount: 0.17,\n        from: -this.currentCell\n      }\n    }, 'showGrid').add(() => {\n      this.textReveal.in();\n    }, 'showGrid+=0.3');\n  }\n\n  /**\n   * Change elements when the content is open\n   */\n\n  changeContent(position) {\n    const imageCell = this.imageCellArr[this.currentCell];\n    const upcomingImageCell = this.imageCellArr[position];\n    const innerImage = imageCell.DOM.el.querySelector('img');\n    const upcomingInnerImage = upcomingImageCell.DOM.el.querySelector('img');\n\n    // Обновление текущей ячейки в мини-сетке\n    this.DOM.miniGrid.cells[this.currentCell].classList.remove('grid__cell--current');\n    this.currentCell = position;\n    this.DOM.miniGrid.cells[this.currentCell].classList.add('grid__cell--current');\n\n    // Вычисление трансформации для нового изображения\n    const imageTransform = this.calcTransformImage();\n    const currentNumberPosition = imageCell.contentId.replace(/\\D/g, '');\n    const upcomingNumberPosition = upcomingImageCell.contentId.replace(/\\D/g, '');\n    const direction = upcomingNumberPosition < currentNumberPosition ? 'left' : 'right';\n    if (direction === 'right') {\n      this.currentRotation += 90;\n    } else {\n      this.currentRotation -= 90;\n    }\n    node_modules_gsap/* gsap */.p8.timeline({\n      defaults: {\n        duration: 1.5,\n        ease: 'hop'\n      },\n      onComplete: () => {\n        this.isAnimating = false;\n      }\n    }).addLabel('start', 0).add(imageCell.contentItem.textReveal.out(), 'start').add(() => {\n      imageCell.contentItem.DOM.el.classList.remove('content__item--current');\n    }).set([imageCell.DOM.el, upcomingImageCell.DOM.el], {\n      willChange: 'transform, opacity'\n    }, 'start').set(imageCell.DOM.el, {\n      clipPath: direction === 'right' ? \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\" : \"polygon(100% 0%, 0% 0%, 0% 100%, 100% 100%)\"\n    }, 'start').set(upcomingImageCell.DOM.el, {\n      clipPath: direction === 'right' ? \"polygon(100% 0%, 100% 0%, 100% 100%, 100% 100%)\" : \"polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%)\",\n      x: imageTransform.x - 20,\n      y: imageTransform.y - 10,\n      width: window.innerWidth + 40,\n      height: window.innerHeight + 20,\n      scale: 1\n    }, 'start').set(upcomingInnerImage, {\n      x: direction === 'right' ? 250 : -250,\n      zIndex: 2\n    }, 'start').to([this.DOM.navigation.left, this.DOM.navigation.right], {\n      rotate: this.currentRotation,\n      duration: 1.5,\n      ease: 'hop'\n    }, 'start').to(imageCell.DOM.el, {\n      clipPath: direction === 'right' ? \"polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%)\" : \"polygon(100% 0%, 100% 0%, 100% 100%, 100% 100%)\"\n\n      // onComplete: () => gsap.set(imageCell.DOM.el, { opacity: 0 })\n    }, 'start').to(innerImage, {\n      x: direction === 'right' ? -500 : 500,\n      duration: 1.5,\n      ease: 'hop'\n    }, 'start').to(upcomingImageCell.DOM.el, {\n      clipPath: direction === 'right' ? \"polygon(100% 0%, 0% 0%, 0% 100%, 100% 100%)\" : \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\n      opacity: 1,\n      onComplete: () => {\n        node_modules_gsap/* gsap */.p8.set([imageCell.DOM.el, upcomingImageCell.DOM.el], {\n          willChange: ''\n        });\n        node_modules_gsap/* gsap */.p8.set(imageCell.DOM.el, {\n          clipPath: null,\n          x: 0,\n          y: 0,\n          scale: 0.8,\n          width: 'calc(100% - var(--grid-padding) * 2)',\n          height: 'calc(100% - var(--grid-padding) * 2)',\n          opacity: 0,\n          zIndex: null\n        }, 'start');\n        node_modules_gsap/* gsap */.p8.set(innerImage, {\n          x: 0\n        });\n      }\n    }, 'start').to(upcomingInnerImage, {\n      x: 0,\n      duration: 1.5,\n      ease: 'hop'\n    }, 'start').to(this.DOM.pagination.numbers, {\n      y: `${-20 * this.currentCell}%`,\n      // Смещаем контейнер вверх на 20% на каждый индекс\n      duration: 1.5,\n      ease: 'hop'\n    }, 'start').addLabel('showContent', '>-=0.4').add(() => {\n      upcomingImageCell.contentItem.textReveal.in();\n    }, 'showContent').add(() => {\n      upcomingImageCell.contentItem.DOM.el.classList.add('content__item--current');\n    }, 'showContent+=0.02');\n\n    // вот тут подумать\n    // .set(imageCell.DOM.el, {\n    //   x: 0,\n    //   y: 0,\n    //   width: this.otherImageCells[0].offsetWidth,\n    //   height: this.otherImageCells[0].offsetHeight,\n    //   clipPath: null,\n    //   // willChange: '',\n    //   zIndex: 1,\n    //   onComplete: () => {\n    //     gsap.set(innerImage, {\n    //       x: 0,\n    //     },'showContent+=0.04')\n    //   }\n    // },'showContent+=0.02')\n  }\n  wheelSlides() {\n    // if ( !this.isGridView || this.isAnimating) {\n    //   return false;\n    // }\n    const track = document.getElementById('image-track');\n\n    // window.onmousedown = e => {\n    //   track.dataset.mouseDownAt = e.clientX;\n    // }\n\n    // window.onmouseup = () => {\n    //   track.dataset.mouseDownAt = \"0\";\n    //   track.dataset.prevPercentage = track.dataset.percentage;\n    // }\n\n    // window.onmousemove = e => {\n    //   if (track.dataset.mouseDownAt === \"0\" ) return;\n\n    //   const mouseDelta = parseFloat(track.dataset.mouseDownAt) - e.clientX,\n    //         maxDelta = window.innerWidth / 2;\n\n    //   const percentage = (mouseDelta / maxDelta) * -100,\n    //   nextPercentageUnrestricted = parseFloat(track.dataset.prevPercentage) + percentage;\n\n    //   const nextPercentage = Math.max(Math.min(nextPercentageUnrestricted, 0), -100);\n\n    //   track.dataset.percentage = nextPercentage;\n\n    //   track.animate({\n    //     transform: `translate(${nextPercentage}%, -50%)`\n    //   }, { duration: 1200, fill: \"forwards\"})\n\n    //   for (const image of track.getElementsByClassName('image')) {\n    //     image.animate({\n    //       objectPosition: `${nextPercentage + 100}% center`\n    //     }, { duration: 1200, fill: \"forwards\"})\n    //   }\n    // }\n\n    track.onwheel = e => {\n      const maxDelta = window.innerWidth / 2;\n      const scrollDelta = e.deltaY,\n        percentage = scrollDelta / maxDelta * -10; // Изменяем скорость скролла\n\n      console.log(percentage);\n      const nextPercentageUnrestricted = parseFloat(track.dataset.prevPercentage) + percentage;\n      const nextPercentage = Math.max(Math.min(nextPercentageUnrestricted, 0), -100);\n      track.dataset.prevPercentage = nextPercentage;\n      track.animate({\n        transform: `translate(${nextPercentage}%, -50%)`\n      }, {\n        duration: 1200,\n        fill: \"forwards\"\n      });\n      for (const image of track.getElementsByClassName('image')) {\n        image.animate({\n          objectPosition: `${nextPercentage + 100}% center`\n        }, {\n          duration: 1200,\n          fill: \"forwards\"\n        });\n      }\n    };\n  }\n  calcOtherImage() {\n    if (!this.isGridView) return false;\n    const masterCell = adjustedBoundingRect(this.imageCellArr[0].DOM.el);\n    return {\n      width: masterCell.width,\n      height: masterCell.height,\n      x: -masterCell.left,\n      y: -masterCell.top\n    };\n  }\n  calcTransformImage() {\n    const cellrect = adjustedBoundingRect(this.imageCellArr[this.currentCell].DOM.el);\n    return {\n      width: cellrect.width,\n      height: cellrect.height,\n      scale: winsize.width * 0.54 / cellrect.width,\n      // x: winsize.width * 0.65 - (cellrect.left + cellrect.width/2),\n      // y: winsize.height * 0.50 - (cellrect.top + cellrect.height/2)\n      x: -cellrect.left,\n      y: -cellrect.top\n    };\n  }\n}\n\n// https://camillemormal.com/\n;// CONCATENATED MODULE: ./src/js/preloaderAnimation.js\nconst preloaderAnimation = () => {\n  let tl = gsap.timeline({\n    delay: 0\n  });\n  tl.to('.col', {\n    top: 0,\n    duration: 3,\n    ease: 'power4.inOut'\n  });\n  tl.to('.c-1 .item', {\n    top: 0,\n    stagger: 0.25,\n    duration: 3,\n    ease: 'power4.inOut'\n  }, '-=2');\n  tl.to('.c-2 .item', {\n    top: 0,\n    stagger: -0.25,\n    duration: 3,\n    ease: 'power4.inOut'\n  }, '-=4');\n  tl.to('.c-3 .item', {\n    top: 0,\n    stagger: 0.25,\n    duration: 3,\n    ease: 'power4.inOut'\n  }, '-=4');\n  tl.to('.c-4 .item', {\n    top: 0,\n    stagger: -0.25,\n    duration: 3,\n    ease: 'power4.inOut'\n  }, '-=4');\n  tl.to('.c-5 .item', {\n    top: 0,\n    stagger: 0.25,\n    duration: 3,\n    ease: 'power4.inOut'\n  }, '-=4');\n  tl.to('.container', {\n    scale: 5.3,\n    duration: 4,\n    ease: 'power4.inOut'\n  }, '-=2');\n  tl.to('.cross', {\n    scale: 1,\n    duration: 1,\n    ease: 'power3.inOut'\n  }, '-=1.5');\n  tl.to('.nav-item a, .title p, .slide-num p, .preview img', {\n    top: 0,\n    stagger: 0.075,\n    duration: 1,\n    ease: 'power3.inOut',\n    onComplete: () => {\n      gsap.set(['.container', '.content-preloader'], {\n        display: \"none\"\n      });\n    }\n  }, '-=1.5');\n};\n/* harmony default export */ const js_preloaderAnimation = (preloaderAnimation);\n;// CONCATENATED MODULE: ./src/js/index.js\n\n\n\n\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  preloadImages('.grid__cell-img-inner, .slide-nav__img').then(() => {\n    js_preloaderAnimation();\n    new Grid(document.querySelector('.grid--large'));\n    // document.body.classList.remove('loading')\n  });\n\n  // const setupMediaQueries = () => {\n  //   const mm = gsap.matchMedia();\n  //   const breakPoint = 991;\n\n  //   mm.add({\n  //     isMobile: `(max-width: ${breakPoint}px)`,\n  //     isDesktop: `(min-width: ${breakPoint + 1}px)`\n  //   }, (context) => {\n  //     const { isMobile, isDesktop } = context.conditions;\n\n  //     if (isDesktop) setupDesktopFeatures();\n  //     if (isMobile) setupMobileFeatures();\n  //   });\n  // };\n\n  // const setupDesktopFeatures = () => {\n  // };\n\n  // const setupMobileFeatures = () => {\n\n  // };\n\n  // setupMediaQueries();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///986\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(g){var n=__webpack_module_cache__[g];if(void 0!==n)return n.exports;var I=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(I.exports,I,I.exports,__webpack_require__),I.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(g,n,I,C)=>{if(!n){var t=1/0;for(i=0;i<deferred.length;i++){for(var[n,I,C]=deferred[i],e=!0,l=0;l<n.length;l++)(!1&C||t>=C)&&Object.keys(__webpack_require__.O).every((g=>__webpack_require__.O[g](n[l])))?n.splice(l--,1):(e=!1,C<t&&(t=C));if(e){deferred.splice(i--,1);var A=I();void 0!==A&&(g=A)}}return g}C=C||0;for(var i=deferred.length;i>0&&deferred[i-1][2]>C;i--)deferred[i]=deferred[i-1];deferred[i]=[n,I,C]},__webpack_require__.d=(g,n)=>{for(var I in n)__webpack_require__.o(n,I)&&!__webpack_require__.o(g,I)&&Object.defineProperty(g,I,{enumerable:!0,get:n[I]})},__webpack_require__.o=(g,n)=>Object.prototype.hasOwnProperty.call(g,n),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},(()=>{var g={179:0};__webpack_require__.O.j=n=>0===g[n];var n=(n,I)=>{var C,t,[e,l,A]=I,i=0;if(e.some((n=>0!==g[n]))){for(C in l)__webpack_require__.o(l,C)&&(__webpack_require__.m[C]=l[C]);if(A)var c=A(__webpack_require__)}for(n&&n(I);i<e.length;i++)t=e[i],__webpack_require__.o(g,t)&&g[t]&&g[t][0](),g[t]=0;return __webpack_require__.O(c)},I=self.webpackChunk=self.webpackChunk||[];I.forEach(n.bind(null,0)),I.push=n.bind(null,I.push.bind(I))})();var __webpack_exports__=__webpack_require__.O(void 0,[804],(()=>__webpack_require__(986)));return __webpack_exports__=__webpack_require__.O(__webpack_exports__),__webpack_exports__})()));